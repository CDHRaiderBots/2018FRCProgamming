// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2450.TimmyTurner.commands;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2450.TimmyTurner.Robot;
import org.usfirst.frc2450.TimmyTurner.RobotMap;

/**
 *
 */
public class DriveForward extends Command {

	
	double drivedistance = 1;
	double leftdistance;
	double rightdistance;
	double averagedistance; 
	Preferences prefs;
	double Kp;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveForward(double distance) {
    	drivedistance = distance; 
    	
    	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

	// Called just before this Command runs the first time
    protected void initialize() {
    	prefs = Preferences.getInstance();
    	
    	Kp = prefs.getDouble("KP", 0.03);
    	
    	setTimeout(6);
    	RobotMap.driveTrainSubsystemLeftEncoder.reset();
    	RobotMap.driveTrainSubsystemRightEncoder.reset();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	if(drivedistance < 0)
    	{
    	//org.usfirst.frc2450.TimmyTurner.RobotMap.driveTrainSubsystemRightMotor.set(.4);
    	//org.usfirst.frc2450.TimmyTurner.RobotMap.driveTrainSubsystemLeftMotor.set(-.43);
    		double angle = RobotMap.gyroSPI.getAngle();
    		RobotMap.driveTrainSubsystemRobotDrive2.arcadeDrive(0.4, -angle * Kp);
    		
    	//setTimeout(drivedistance);
    	 leftdistance = RobotMap.driveTrainSubsystemLeftEncoder.getDistance();
    	// rightdistance = RobotMap.driveTrainSubsystemRightEncoder.getDistance();
    	// averagedistance = (leftdistance + rightdistance)/2; 
    	}
    	else
    	{
    		org.usfirst.frc2450.TimmyTurner.RobotMap.driveTrainSubsystemRightMotor.set(-.4);
        	org.usfirst.frc2450.TimmyTurner.RobotMap.driveTrainSubsystemLeftMotor.set(.43);
        	
        	 leftdistance = RobotMap.driveTrainSubsystemLeftEncoder.getDistance();
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    if(isTimedOut())
    	{
    		return true;
    	}
    	if(drivedistance < 0){
    		return(leftdistance <= drivedistance);
    	}
    	
    	else
    	{
    		return(leftdistance >= drivedistance);
    	}
    }

    // Called once after isFinished returns true
    protected void end() {
    	RobotMap.driveTrainSubsystemLeftEncoder.reset();
//    	RobotMap.driveTrainSubsystemLeftEncoder.reset();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
