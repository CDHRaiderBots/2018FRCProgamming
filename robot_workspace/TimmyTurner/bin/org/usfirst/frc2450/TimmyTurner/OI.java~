// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2450.TimmyTurner;

import org.usfirst.frc2450.TimmyTurner.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton elevatorUpButton;
    public JoystickButton elevatorDownButton;
    public JoystickButton cubePickUpButton;
    public JoystickButton barClimbReleaseButton;
    public Joystick rightJoystick;
    public JoystickButton turnRightButton;
    public JoystickButton turnLeftButton;
    public JoystickButton cubeEjectButton;
    public JoystickButton activateClimbButton;
    public JoystickButton activateConveyorButton;
    public Joystick leftJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        leftJoystick = new Joystick(0);
        
        activateConveyorButton = new JoystickButton(leftJoystick, 2);
        activateConveyorButton.whileHeld(new ActivateConveyor());
        activateClimbButton = new JoystickButton(leftJoystick, 5);
        activateClimbButton.whileHeld(new ActivateClimb());
        cubeEjectButton = new JoystickButton(leftJoystick, 1);
        cubeEjectButton.whileHeld(new CubeEject());
        turnLeftButton = new JoystickButton(leftJoystick, 14);
        turnLeftButton.whenPressed(new TurnLeft());
        turnRightButton = new JoystickButton(leftJoystick, 15);
        turnRightButton.whenPressed(new TurnRight());
        rightJoystick = new Joystick(1);
        
        barClimbReleaseButton = new JoystickButton(rightJoystick, 4);
        barClimbReleaseButton.whileHeld(new BarClimbDoNothing());
        cubePickUpButton = new JoystickButton(rightJoystick, 1);
        cubePickUpButton.whileHeld(new CubePickUp());
        elevatorDownButton = new JoystickButton(rightJoystick, 3);
        elevatorDownButton.whileHeld(new ElevatorDown());
        elevatorUpButton = new JoystickButton(rightJoystick, 2);
        elevatorUpButton.whileHeld(new ElevatorUp());


        // SmartDashboard Buttons
        SmartDashboard.putData("ActivateClimb", new ActivateClimb());
        SmartDashboard.putData("ActivateConveyor", new ActivateConveyor());
        SmartDashboard.putData("AutoConveyor", new AutoConveyor());
        SmartDashboard.putData("AutoNothing", new AutoNothing());
        SmartDashboard.putData("AutoPos0LS", new AutoPos0LS());
        SmartDashboard.putData("AutoPos1LF", new AutoPos1LF());
        SmartDashboard.putData("AutoPos2LF", new AutoPos2LF());
        SmartDashboard.putData("AutoPos2RF", new AutoPos2RF());
        SmartDashboard.putData("AutoPos3RF", new AutoPos3RF());
        SmartDashboard.putData("AutoPos4RS", new AutoPos4RS());
        SmartDashboard.putData("BarClimbDoNothing", new BarClimbDoNothing());
        SmartDashboard.putData("BarClimbReleaseCommand", new BarClimbReleaseCommand());
        SmartDashboard.putData("ConveyorDoNothing", new ConveyorDoNothing());
        SmartDashboard.putData("CubeEject", new CubeEject());
        SmartDashboard.putData("CubePickUp", new CubePickUp());
        SmartDashboard.putData("DefaultAuto", new DefaultAuto());
        SmartDashboard.putData("DriveForward", new DriveForward());
        SmartDashboard.putData("DriveWithJoysticks", new DriveWithJoysticks());
        SmartDashboard.putData("ElevatorDoNothing", new ElevatorDoNothing());
        SmartDashboard.putData("ElevatorDown", new ElevatorDown());
        SmartDashboard.putData("ElevatorUp", new ElevatorUp());
        SmartDashboard.putData("IntakeDoNothing", new IntakeDoNothing());
        SmartDashboard.putData("ReleaseClimb", new ReleaseClimb());
        SmartDashboard.putData("TurnLeft", new TurnLeft());
        SmartDashboard.putData("TurnRight", new TurnRight());
        SmartDashboard.putData("AutoForward", new AutoForward());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getRightJoystick() {
        return rightJoystick;
    }

    public Joystick getLeftJoystick() {
        return leftJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

