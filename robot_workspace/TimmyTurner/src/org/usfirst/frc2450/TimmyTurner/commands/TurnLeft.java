// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2450.TimmyTurner.commands;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.interfaces.Gyro;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2450.TimmyTurner.Robot;
import org.usfirst.frc2450.TimmyTurner.RobotMap;
import org.usfirst.frc2450.TimmyTurner.subsystems.ADXRS453Gyro;

/**
 *
 */
public class TurnLeft extends Command {
	Preferences prefs; 
	double targetangle;
	double targetdivident;
	double targetspeed;
	double P = 0.5;
	double I = 0.2;
	double D = 0;
	double integral, previous_error, setpoint = 0;
	DifferentialDrive robotDrive;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	double rcw;
	double error;
	double derivative;
	double proportional;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TurnLeft(double targetangle) {
    	SmartDashboard.putString("Left Value of RCW", "rcw: " + rcw);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    public void setSetpoint(int setpoint)
    {
    	this.setpoint = setpoint;
    	previous_error = setpoint - RobotMap.gyroSPI.getAngle();
    }
    
    public void PID()
    {
    	//error = setpoint - RobotMap.gyroSPI.getAngle();
    	error = (targetangle - RobotMap.gyroSPI.getAngle())/180;
    	proportional = P * error;
    	this.integral += (error*.02);
    	derivative = (error - this.previous_error) / .02;
    	this.rcw = proportional + I*this.integral + D*derivative;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	RobotMap.gyroSPI.reset();
		prefs = Preferences.getInstance();
		targetangle = -prefs.getDouble("targetangle", 1);
		targetdivident = prefs.getDouble("targetdivident", 250.0);
		targetspeed = prefs.getDouble("targetspeed", 0.2);
		proportional = 0;
    	integral = 0;
    	derivative = 0;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	PID();
    	org.usfirst.frc2450.TimmyTurner.RobotMap.driveTrainSubsystemRobotDrive2.arcadeDrive(0, rcw);
    
    	//org.usfirst.frc2450.TimmyTurner.RobotMap.driveTrainSubsystemLeftMotor.set(-speed());
    	//org.usfirst.frc2450.TimmyTurner.RobotMap.driveTrainSubsystemRightMotor.set(-speed());
    	
//    	org.usfirst.frc2450.TimmyTurner.RobotMap.driveTrainSubsystemLeftMotor.set(-0.3);
//    	org.usfirst.frc2450.TimmyTurner.RobotMap.driveTrainSubsystemRightMotor.set(-0.33);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return (RobotMap.gyroSPI.getAngle() <= -targetangle); 
    }

    private double speed()
    {
    	return targetspeed + (targetangle + RobotMap.gyroSPI.getAngle())/targetdivident;
    }
    // Called once after isFinished returns true
    protected void end() {
    	org.usfirst.frc2450.TimmyTurner.RobotMap.driveTrainSubsystemRobotDrive2.stopMotor();
    	RobotMap.driveTrainSubsystemRightEncoder.reset();
    	
    	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
